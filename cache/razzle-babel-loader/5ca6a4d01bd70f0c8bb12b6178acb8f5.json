{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Image from \"./Image\";\nimport useIntersectionObserver from \"helpers/observer\";\nimport \"./scss/imageload.scoped.css\";\n\nconst ImageContainer = props => {\n  const ref = React.useRef();\n  const [isVisible, setIsVisible] = React.useState(false);\n  useIntersectionObserver({\n    target: ref,\n    onIntersect: ([{\n      isIntersecting\n    }], observerElement) => {\n      if (isIntersecting) {\n        if (!isVisible) {\n          setIsVisible(true);\n        }\n\n        observerElement.unobserve(ref.current);\n      }\n    }\n  });\n  const aspectRatio = props.height / props.width * 100;\n  return __jsx(\"a\", {\n    href: props.url,\n    ref: ref,\n    rel: \"noopener noreferrer\",\n    target: \"_BLANK\",\n    className: \"image-container r r-2x is-loading\",\n    style: {\n      paddingBottom: `${aspectRatio}%`\n    }\n  }, isVisible && __jsx(Image, {\n    src: props.src,\n    thumb: props.thumb,\n    alt: props.alt,\n    wid: props.width,\n    hig: props.height\n  }));\n};\n\nexport default ImageContainer;","map":{"version":3,"sources":["/home/ab/Code/reactJs/razzel/src/components/cosImage/imgload.jsx"],"names":["React","Image","useIntersectionObserver","ImageContainer","props","ref","useRef","isVisible","setIsVisible","useState","target","onIntersect","isIntersecting","observerElement","unobserve","current","aspectRatio","height","width","url","paddingBottom","src","thumb","alt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,uBAAP,MAAoC,kBAApC;AACA,OAAO,6BAAP;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAMC,GAAG,GAAGL,KAAK,CAACM,MAAN,EAAZ;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,KAAK,CAACS,QAAN,CAAe,KAAf,CAAlC;AAEAP,EAAAA,uBAAuB,CAAC;AACpBQ,IAAAA,MAAM,EAAEL,GADY;AAEpBM,IAAAA,WAAW,EAAE,CAAC,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAD,EAAuBC,eAAvB,KAA2C;AACpD,UAAID,cAAJ,EAAoB;AAChB,YAAI,CAACL,SAAL,EAAgB;AACZC,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AACDK,QAAAA,eAAe,CAACC,SAAhB,CAA0BT,GAAG,CAACU,OAA9B;AACH;AACJ;AATmB,GAAD,CAAvB;AAYA,QAAMC,WAAW,GAAIZ,KAAK,CAACa,MAAN,GAAeb,KAAK,CAACc,KAAtB,GAA+B,GAAnD;AAEA,SACI;AACI,IAAA,IAAI,EAAEd,KAAK,CAACe,GADhB;AAEI,IAAA,GAAG,EAAEd,GAFT;AAGI,IAAA,GAAG,EAAC,qBAHR;AAII,IAAA,MAAM,EAAC,QAJX;AAKI,IAAA,SAAS,EAAC,mCALd;AAMI,IAAA,KAAK,EAAE;AAAEe,MAAAA,aAAa,EAAG,GAAEJ,WAAY;AAAhC;AANX,KAQKT,SAAS,IACN,MAAC,KAAD;AACI,IAAA,GAAG,EAAEH,KAAK,CAACiB,GADf;AAEI,IAAA,KAAK,EAAEjB,KAAK,CAACkB,KAFjB;AAGI,IAAA,GAAG,EAAElB,KAAK,CAACmB,GAHf;AAII,IAAA,GAAG,EAAEnB,KAAK,CAACc,KAJf;AAKI,IAAA,GAAG,EAAEd,KAAK,CAACa;AALf,IATR,CADJ;AAoBH,CAtCD;;AAwCA,eAAed,cAAf","sourcesContent":["import React from \"react\"\nimport Image from \"./Image\"\nimport useIntersectionObserver from \"helpers/observer\"\nimport \"./scss/imageload.scoped.css\"\n\nconst ImageContainer = (props) => {\n    const ref = React.useRef()\n    const [isVisible, setIsVisible] = React.useState(false)\n\n    useIntersectionObserver({\n        target: ref,\n        onIntersect: ([{ isIntersecting }], observerElement) => {\n            if (isIntersecting) {\n                if (!isVisible) {\n                    setIsVisible(true)\n                }\n                observerElement.unobserve(ref.current)\n            }\n        },\n    })\n\n    const aspectRatio = (props.height / props.width) * 100\n\n    return (\n        <a\n            href={props.url}\n            ref={ref}\n            rel=\"noopener noreferrer\"\n            target=\"_BLANK\"\n            className=\"image-container r r-2x is-loading\"\n            style={{ paddingBottom: `${aspectRatio}%` }}\n        >\n            {isVisible && (\n                <Image\n                    src={props.src}\n                    thumb={props.thumb}\n                    alt={props.alt}\n                    wid={props.width}\n                    hig={props.height}\n                />\n            )}\n        </a>\n    )\n}\n\nexport default ImageContainer\n"]},"metadata":{},"sourceType":"module"}