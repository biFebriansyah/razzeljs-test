{"ast":null,"code":"var _jsxFileName = \"/home/ab/Code/reactJs/razzel/src/server.js\";\nvar __jsx = React.createElement;\nimport App from \"./App\";\nimport React from \"react\";\nimport express from \"express\";\nimport configureStore from \"./redux/store\";\nimport { StaticRouter } from \"react-router-dom\";\nimport { renderToString } from \"react-dom/server\";\nimport { Provider } from \"react-redux\";\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst cssLinksFromAssets = (assets, entrypoint) => {\n  return assets[entrypoint] ? assets[entrypoint].css ? assets[entrypoint].css.map(asset => `<link rel=\"stylesheet\" href=\"${asset}\">`).join(\"\") : \"\" : \"\";\n};\n\nconst jsScriptTagsFromAssets = (assets, entrypoint, extra = \"\") => {\n  return assets[entrypoint] ? assets[entrypoint].js ? assets[entrypoint].js.map(asset => `<script src=\"${asset}\"${extra}></script>`).join(\"\") : \"\" : \"\";\n};\n\nexport const renderApp = (req, res) => {\n  return new Promise(resolve => {\n    fetchCounter(apiResult => {\n      const initialStateUsers = {\n        data: {},\n        isAuth: false,\n        token: null,\n        premium: false,\n        paycode: \"\"\n      }; // Compile an initial state\n\n      const preloadedState = {\n        users: initialStateUsers || apiResult\n      }; // Create a new Redux store instance\n\n      const store = configureStore(preloadedState); // Render the component to a string\n\n      const markup = renderToString(__jsx(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, __jsx(StaticRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, __jsx(App, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      })))); // Grab the initial state from our Redux store\n\n      const finalState = store.getState();\n      const html = // prettier-ignore\n      `<!doctype html>\n      <html lang=\"\">\n      <head>\n          <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n          <meta charSet='utf-8' />\n          <title>Welcome to Razzle</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n          ${cssLinksFromAssets(assets, 'client')}\n      </head>\n      <body>\n          <div id=\"root\">${markup}</div>\n          <script>\n            window.__PRELOADED_STATE__ = ${serialize(finalState)}\n          </script>\n          ${jsScriptTagsFromAssets(assets, 'client', ' defer crossorigin')}\n      </body>\n    </html>`;\n      resolve({\n        html\n      });\n    });\n  });\n};\nconst server = express();\nserver.disable(\"x-powered-by\").use(express.static(process.env.RAZZLE_PUBLIC_DIR)).get(\"/*\", async (req, res) => {\n  const {\n    html\n  } = await renderApp(req, res);\n  res.send(html);\n});\nexport default server;","map":{"version":3,"sources":["/home/ab/Code/reactJs/razzel/src/server.js"],"names":["App","React","express","configureStore","StaticRouter","renderToString","Provider","assets","require","process","env","RAZZLE_ASSETS_MANIFEST","cssLinksFromAssets","entrypoint","css","map","asset","join","jsScriptTagsFromAssets","extra","js","renderApp","req","res","Promise","resolve","fetchCounter","apiResult","initialStateUsers","data","isAuth","token","premium","paycode","preloadedState","users","store","markup","finalState","getState","html","serialize","server","disable","use","static","RAZZLE_PUBLIC_DIR","get","send"],"mappings":"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","sourcesContent":["import App from \"./App\"\nimport React from \"react\"\nimport express from \"express\"\nimport configureStore from \"./redux/store\"\nimport { StaticRouter } from \"react-router-dom\"\nimport { renderToString } from \"react-dom/server\"\nimport { Provider } from \"react-redux\"\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST)\n\nconst cssLinksFromAssets = (assets, entrypoint) => {\n    return assets[entrypoint]\n        ? assets[entrypoint].css\n            ? assets[entrypoint].css\n                  .map((asset) => `<link rel=\"stylesheet\" href=\"${asset}\">`)\n                  .join(\"\")\n            : \"\"\n        : \"\"\n}\n\nconst jsScriptTagsFromAssets = (assets, entrypoint, extra = \"\") => {\n    return assets[entrypoint]\n        ? assets[entrypoint].js\n            ? assets[entrypoint].js\n                  .map((asset) => `<script src=\"${asset}\"${extra}></script>`)\n                  .join(\"\")\n            : \"\"\n        : \"\"\n}\n\nexport const renderApp = (req, res) => {\n    return new Promise((resolve) => {\n        fetchCounter((apiResult) => {\n            const initialStateUsers = {\n                data: {},\n                isAuth: false,\n                token: null,\n                premium: false,\n                paycode: \"\",\n            }\n\n            // Compile an initial state\n            const preloadedState = { users: initialStateUsers || apiResult }\n\n            // Create a new Redux store instance\n            const store = configureStore(preloadedState)\n\n            // Render the component to a string\n            const markup = renderToString(\n                <Provider store={store}>\n                    <StaticRouter>\n                        <App />\n                    </StaticRouter>\n                </Provider>\n            )\n\n            // Grab the initial state from our Redux store\n            const finalState = store.getState()\n\n            const html =\n                // prettier-ignore\n                `<!doctype html>\n      <html lang=\"\">\n      <head>\n          <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n          <meta charSet='utf-8' />\n          <title>Welcome to Razzle</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n          ${cssLinksFromAssets(assets, 'client')}\n      </head>\n      <body>\n          <div id=\"root\">${markup}</div>\n          <script>\n            window.__PRELOADED_STATE__ = ${serialize(finalState)}\n          </script>\n          ${jsScriptTagsFromAssets(assets, 'client', ' defer crossorigin')}\n      </body>\n    </html>`\n\n            resolve({ html })\n        })\n    })\n}\nconst server = express()\n\nserver\n    .disable(\"x-powered-by\")\n    .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n    .get(\"/*\", async (req, res) => {\n        const { html } = await renderApp(req, res)\n        res.send(html)\n    })\n\nexport default server\n"]},"metadata":{},"sourceType":"module"}