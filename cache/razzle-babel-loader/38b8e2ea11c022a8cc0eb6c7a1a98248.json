{"ast":null,"code":"function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _config = new WeakMap();\n\nvar _show = new WeakMap();\n\nvar _ondev = new WeakMap();\n\nclass Logs {\n  constructor(showLogs, nameFile = \"fileName\") {\n    _config.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _show.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _ondev.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _config, nameFile);\n\n    _classPrivateFieldSet(this, _show, showLogs);\n\n    _classPrivateFieldSet(this, _ondev, false);\n  }\n\n  Show(msg) {\n    if (_classPrivateFieldGet(this, _show) && _classPrivateFieldGet(this, _ondev)) {\n      console.log(_classPrivateFieldGet(this, _config), msg);\n    }\n  }\n\n}\n\nexport default Logs;","map":{"version":3,"sources":["/home/ab/Code/reactJs/razzel/src/helpers/logs.js"],"names":["Logs","constructor","showLogs","nameFile","Show","msg","console","log"],"mappings":";;;;;;;;;;;;;;;;AAAA,MAAMA,IAAN,CAAW;AAKPC,EAAAA,WAAW,CAACC,QAAD,EAAWC,QAAQ,GAAG,UAAtB,EAAkC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACzC,yCAAeA,QAAf;;AACA,uCAAaD,QAAb;;AACA,wCAAc,KAAd;AACH;;AAEDE,EAAAA,IAAI,CAACC,GAAD,EAAM;AACN,QAAI,4DAAc,IAAd,SAAJ,EAA+B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,uBAAY,IAAZ,YAA0BF,GAA1B;AACH;AACJ;;AAfM;;AAkBX,eAAeL,IAAf","sourcesContent":["class Logs {\n    #config\n    #show\n    #ondev\n\n    constructor(showLogs, nameFile = \"fileName\") {\n        this.#config = nameFile\n        this.#show = showLogs\n        this.#ondev = false\n    }\n\n    Show(msg) {\n        if (this.#show && this.#ondev) {\n            console.log(this.#config, msg)\n        }\n    }\n}\n\nexport default Logs\n"]},"metadata":{},"sourceType":"module"}